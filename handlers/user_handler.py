import json
import os
import random

from aiogram import F, Router
from aiogram.enums import ChatMemberStatus
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from datetime import datetime
import aiosqlite
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.inline_keyboard import create_inline_kb
from config_data.config import Config, load_config
from lexicon.lexicon_ru import LEXICON_RU
from database import database as db
from workers.qr_code import QRCode

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()
config: Config = load_config()


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TradeUserCoins(StatesGroup):
    choose_trade_type = State()
    lucky_to_cash = State()
    cash_to_chips = State()
    accept_lucky_cash_trade = State()
    accept_cash_chips_trade = State()


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ '–º–æ–Ω–µ—Ç–∞', –æ–±–º–µ–Ω, —Ç—Ä–µ–π–¥–∏–Ω–≥ —Å –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data == 'coins')
async def handle_coins(callback: CallbackQuery):
    coins = await db.coins_user_from_users(str(callback.from_user.id))
    nickname = await db.nickname_from_users_where_id(str(callback.from_user.id))
    await callback.message.edit_text(text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, {nickname[0][0]}\n\n'
                                          f'–ù–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É:\n\n'
                                          f'<b>Lucky</b>: {coins[0][0]}\n'
                                          f'<b>CashOnline</b>: {coins[0][1]}\n'
                                          f'<b>OtherCoins</b>: {coins[0][2]}\n'
                                          f'<b>Chips</b>: {coins[0][3]}\n\n'
                                          f'–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                                     reply_markup=create_inline_kb(2, 'trade', 'trade_admin',
                                                                   'history', last_btn='back'))

@router.callback_query(F.data == 'history')
async def get_history_transactions(callback: CallbackQuery):
    await callback.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–µ—Ä–µ–π–¥—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ - \n'
                                  f'https://{config.tg_bot.ipv4}:8000/transactions?user_id=1252901622 ')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±–º–µ–Ω, —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–æ–≥–∏–∫–∞ –æ–±–º–µ–Ω–∞
@router.callback_query(F.data == 'trade')
async def trade_user_coins(callback: CallbackQuery, state: FSMContext):
    coins = await db.coins_user_from_users(str(callback.from_user.id))
    rate_coin = await db.if_rate_coins_for_table()
    await callback.message.edit_text(text=f'ü™ô–ù–∞ –í–∞—à–µ–º —Å—á–µ—Ç—Éü™ô\n\n'
                                          f'<b>Lucky</b>: {coins[0][0]}\n'
                                          f'<b>CashOnline</b>: {coins[0][1]}\n'
                                          f'<b>OtherCoins</b>: {coins[0][2]}\n\n'
                                          f'‚ùó–í–ê–ñ–ù–û‚ùó\n\n'
                                          f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å Lucky –Ω–∞ CashOnline, –∞ —Ç–∞–∫–∂–µ CashOnline –Ω–∞ —Ñ–∏—à–∫–∏. –ï—Å–ª–∏ '
                                          f'–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω, —Ç–æ <u><b>–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, '
                                          f'–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –∫—É—Ä—Å</b></u>, '
                                          f'–µ—Å–ª–∏ –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ–≥–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                                          f'<u><b>–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b></u>\n\n'
                                          f'–û–¥–Ω–∞ –º–æ–Ω–µ—Ç–∞ {rate_coin[0][1]} —Å—Ç–æ–∏—Ç {rate_coin[0][2]}\n'
                                          f'–û–¥–Ω–∞ —Ñ–∏—à–∫–∞ —Å—Ç–æ–∏—Ç {str(rate_coin[1][2])} {rate_coin[1][0]}\n\n',
                                     reply_markup=create_inline_kb(1, *['Lucky –Ω–∞ CashOnline', 'CashOnline –Ω–∞ —Ñ–∏—à–∫–∏'], last_btn='back_delete'))
    await state.set_state(TradeUserCoins.choose_trade_type)

@router.callback_query(F.data.in_(['Lucky –Ω–∞ CashOnline', 'CashOnline –Ω–∞ —Ñ–∏—à–∫–∏']), TradeUserCoins.choose_trade_type)
async def trade_lucky_to_online(callback: CallbackQuery, state:FSMContext):
    if callback.data == 'Lucky –Ω–∞ CashOnline':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç Lucky, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã—Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ CashOnline')
        await state.set_state(TradeUserCoins.lucky_to_cash)
    if callback.data == 'CashOnline –Ω–∞ —Ñ–∏—à–∫–∏':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç CashOnline, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã—Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ñ–∏—à–∫–∏')
        await state.set_state(TradeUserCoins.cash_to_chips)

@router.message(F.text, StateFilter(*[TradeUserCoins.lucky_to_cash, TradeUserCoins.cash_to_chips]))
async def input_trade(message: Message, state: FSMContext):
    if await state.get_state() == TradeUserCoins.lucky_to_cash:
        current_time = datetime.now().isoformat()
        rate_coin = await db.if_rate_coins_for_table()
        lucky_coin_user = await db.coins_user_from_users(str(message.from_user.id))
        try:
            if float(message.text) == int or float and float(message.text) <= float(lucky_coin_user[0][0]):
                await state.update_data(lucky_coin=float(message.text))
                data = await state.get_data()
                lucky_coin = data['lucky_coin']
                await state.set_state(TradeUserCoins.accept_lucky_cash_trade)
                await state.update_data(lucky_coin=lucky_coin)
                await message.answer(
                    f'{lucky_coin} {rate_coin[0][0]} = {round(lucky_coin / rate_coin[0][2], 2)} {rate_coin[0][1]}\n\n'
                    f'<u><b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è</b></u> –∏–ª–∏ –∂–µ –Ω–∞–∂–∞—Ç—å <u><b>"–û—Ç–º–µ–Ω–∏—Ç—å"</b></u> '
                    f'–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.',
                    reply_markup=create_inline_kb(1, 'assent', last_btn='back_delete'))
            else:
                await message.answer(f'–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞')
        except ValueError:
            await message.answer(f'–û—à–∏–±–∫–∞! –í–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ –ª–∏–±–æ –Ω–µ–ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ!')
    if await state.get_state() == TradeUserCoins.cash_to_chips:
        current_time = datetime.now().isoformat()
        rate_coin = await db.if_rate_coins_for_table()
        cash_coin_user = await db.coins_user_from_users(str(message.from_user.id))
        try:
            if float(message.text) == int or float and float(message.text) <= float(cash_coin_user[0][1]):
                await state.update_data(cash=float(message.text))
                data = await state.get_data()
                cash = data['cash']
                await state.set_state(TradeUserCoins.accept_cash_chips_trade)
                await state.update_data(cash=cash)
                await message.answer(
                    f'{cash} {rate_coin[1][0]} = {round(cash / rate_coin[1][2], 2)} —Ñ–∏—à–µ–∫\n\n'
                    f'<u><b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è</b></u> –∏–ª–∏ –∂–µ –Ω–∞–∂–∞—Ç—å <u><b>"–û—Ç–º–µ–Ω–∏—Ç—å"</b></u> '
                    f'–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.',
                    reply_markup=create_inline_kb(1, 'assent', last_btn='back_delete'))
            else:
                await message.answer(f'–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞')
        except ValueError:
            await message.answer(f'–û—à–∏–±–∫–∞! –í–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ –ª–∏–±–æ –Ω–µ–ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π –æ–±–º–µ–Ω–∞
@router.callback_query(F.data == 'assent', StateFilter(*[TradeUserCoins.accept_lucky_cash_trade, TradeUserCoins.accept_cash_chips_trade]))
async def trade_user_coins_assent(callback: CallbackQuery, state: FSMContext):
    current_time = datetime.now().isoformat()
    if await state.get_state() == TradeUserCoins.accept_lucky_cash_trade:
        lucky_coin_user = await db.coins_user_from_users(str(callback.from_user.id))
        nickname = await db.nickname_from_users_where_id(str(callback.from_user.id))
        rate_coin = await db.if_rate_coins_for_table()
        data = await state.get_data()
        lucky_coin = data['lucky_coin']
        lucky_coin_user = float(lucky_coin_user[0][0]) - lucky_coin
        CashOnline = lucky_coin / rate_coin[0][2]
        await db.update_coin_for_user(user_id=str(callback.from_user.id), Lucky_coin=lucky_coin_user,
                                      CashOnline=round(CashOnline, 2))
        await state.clear()
        await callback.message.delete()
        await callback.answer(chat_id=callback.from_user.id, text=f'–£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω')
        await callback.message.answer(LEXICON_RU['start'] + f'\n\n‚ùó<b>–í–∞—à –Ω–∏–∫ - {nickname[0][0]}</b>\n\n'
                             + f'‚ùó<b>–í–∞—à id - {callback.from_user.id}</b>',
                             reply_markup=create_inline_kb(2, 'coins', 'merch',
                                                           'referral', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã'))
        await db.info_user_for_user(callback.from_user.id, current_time)
    if await state.get_state() == TradeUserCoins.accept_cash_chips_trade:
        data = await state.get_data()
        nickname = await db.nickname_from_users_where_id(str(callback.from_user.id))
        cash_coin = data['cash']
        async with aiosqlite.connect('userdata.db') as conn:
            cash = await conn.execute('SELECT CashOnline FROM users WHERE user_id = ?', (callback.from_user.id,))
            cash = await cash.fetchall()
            chips = await conn.execute('SELECT Chips FROM users WHERE user_id = ?', (callback.from_user.id,))
            chips = await chips.fetchall()
            rate_cash_chips = await conn.execute('SELECT rate FROM rate_coins')
            rate_cash_chips = await rate_cash_chips.fetchall()
            print(rate_cash_chips)
            await conn.execute('UPDATE users SET CashOnline = ?, Chips = ? WHERE user_id = ?', (round(cash[0][0] - float(cash_coin), 2), chips[0][0] + round(cash_coin/rate_cash_chips[1][0], 2), callback.from_user.id))
            await conn.commit()
        await callback.message.delete()
        await callback.answer(chat_id=callback.from_user.id, text=f'–£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω')
        await callback.message.answer(LEXICON_RU['start'] + f'\n\n‚ùó<b>–í–∞—à –Ω–∏–∫ - {nickname[0][0]}</b>\n\n'
                             + f'‚ùó<b>–í–∞—à id - {callback.from_user.id}</b>',
                             reply_markup=create_inline_kb(2, 'coins', 'merch',
                                                           'referral', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã'))
        await db.info_user_for_user(callback.from_user.id, current_time)
@router.callback_query(F.data == 'trade_admin')
async def qr_code(callback: CallbackQuery):
    qrcode = await QRCode(callback.from_user.id).code_generate()
    await callback.message.bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile(f'qr_code_{callback.from_user.id}.png'),
                                          caption='–î–∞–Ω–Ω—ã–π QR –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –≤–∞–º –≤—ã–¥–∞–ª–∏ —Ñ–∏—à–∫–∏')
    os.remove(f'qr_code_{callback.from_user.id}.png')


@router.callback_query(F.data == 'referral')
async def send_referral_link(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç user_id
    referral_link = f"https://t.me/Malevin_Cas_bot?start={user_id}"
    await callback.message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")

@router.callback_query(F.data == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
async def referrals_statistic(callback: CallbackQuery):
    async with aiosqlite.connect('userdata.db') as conn:
        referrals = await conn.execute('SELECT user_id, username, nickname, Lucky, CashOnline, Chips FROM users WHERE referral = ?', (callback.from_user.id,))
        referrals = await referrals.fetchall()
    if referrals == []:
        await callback.message.answer('–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª–∏.')
    else:
        for i in referrals:
            await callback.message.answer(f'<b>ID</b>: {i[0]}\n'
                                          f'<b>Username</b>: {i[1]}\n'
                                          f'<b>Nick</b>: {i[2]}\n'
                                          f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç LuckyCash</b>: {i[3]}\n'
                                          f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç CashOnline</b>: {i[4]}\n'
                                          f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫</b>: {i[5]}')

@router.callback_query(F.data == '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã')
async def get_bonus(callback: CallbackQuery):
    web_app_url = f"https://{config.tg_bot.ipv4}:8000/scanbonus?user_id={callback.from_user.id}"
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="C–∫–∞–Ω–µ—Ä",
        url=web_app_url)
    )
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∫–∞–Ω–µ—Ä–∞ QR –∫–æ–¥–æ–≤:", reply_markup=builder.as_markup())

page = 0
@router.callback_query(F.data == 'merch')
async def get_products(callback: CallbackQuery):
    global page
    async with aiosqlite.connect('userdata.db') as db:
        products = await db.execute('SELECT * FROM merch')
        products = await products.fetchall()
    if products == []:
        await callback.message.answer('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç')
    else:
        await callback.message.bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile(products[page][3]), caption=f'<b>ID</b>: {products[page][0]}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {products[page][1]}\n<b>–¶–µ–Ω–∞</b>: {products[page][2]} <b>CashOnline</b>',
                                              reply_markup=create_inline_kb(1, '–ï—â–µ ->', '–ö—É–ø–∏—Ç—å'))

@router.callback_query(F.data == '–ï—â–µ ->')
async def merch(callback: CallbackQuery):
    global page
    page += 1
    await callback.message.delete()
    async with aiosqlite.connect('userdata.db') as db:
        products = await db.execute('SELECT * FROM merch ORDER BY id')
        products = await products.fetchall()
    try:
        await callback.message.bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile(products[page][3]), caption=f'<b>ID</b>: {products[page][0]}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {products[page][1]}\n<b>–¶–µ–Ω–∞</b>: {products[page][2]} <b>CashOnline</b>',
                                              reply_markup=create_inline_kb(1, '–ï—â–µ ->', '–ö—É–ø–∏—Ç—å'))
    except IndexError:
        page = 0
        await callback.message.bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile(products[page][3]), caption=f'<b>ID</b>: {products[page][0]}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {products[page][1]}\n<b>–¶–µ–Ω–∞</b>: {products[page][2]} <b>CashOnline</b>',
                                              reply_markup=create_inline_kb(1, '–ï—â–µ ->', '–ö—É–ø–∏—Ç—å'))

@router.callback_query(F.data == '–ö—É–ø–∏—Ç—å')
async def buy_product(callback: CallbackQuery):
    product_id = callback.message.caption.split('\n')[0].split(' ')[1]
    print(product_id)
    current_time = datetime.now().isoformat()
    await callback.message.delete()
    async with aiosqlite.connect('userdata.db') as conn:
        price = await conn.execute('SELECT price FROM merch ORDER BY id')
        price = await price.fetchall()
        print(price)
        co_user = await conn.execute('SELECT CashOnline FROM users WHERE user_id = ?', (callback.from_user.id,))
        co_user = await co_user.fetchall()
    if price[0][0] > co_user[0][0]:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–∞–Ω–Ω–æ–π –≤–µ—â–∏.')
    else:
        async with aiosqlite.connect('userdata.db') as conn:
            await conn.execute('UPDATE users SET CashOnline = ? WHERE user_id = ?', (co_user[0][0] - price[0][0], callback.from_user.id))
            await conn.commit()
        await callback.message.answer('–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–∞–Ω–Ω—É—é –≤–µ—â—å.')
        for i in ast.literal_eval(config.tg_bot.admin_id):
            await callback.message.bot.send_message(chat_id=int(i), text=f'‚ÄºÔ∏è<b>{callback.from_user.id}</b> –∫—É–ø–∏–ª –≤–µ—â—å —Å <b>ID {product_id}</b>‚ÄºÔ∏è')
        await db.info_user_for_user(callback.from_user.id, current_time)

class DoQuiz(StatesGroup):
    answer1 = State()
    answer2 = State()
    answer3 = State()
@router.callback_query(F.data.in_(['–ù–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å', '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è']), StateFilter(None))
async def doing_quiz(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–ù–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å':
        with open('exchange_look_quizzes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        data = data[0]
        name_quiz = list(data.keys())
        data = data[name_quiz[0]]
        questions = list(data.keys())
        answers = list(data.values())
        answers = answers[:-1]
        random.shuffle(answers)
        await callback.message.answer(text=questions[0], reply_markup=create_inline_kb(1, *answers))
        await state.set_state(DoQuiz.answer1)
    if callback.data == '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è':
        await callback.message.delete()
        await state.clear()

@router.callback_query(F.data, DoQuiz.answer1)
async def answer_1(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer1 = callback.data)
    with open('exchange_look_quizzes.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    data = data[0]
    name_quiz = list(data.keys())
    data = data[name_quiz[0]]
    questions = list(data.keys())
    answers = list(data.values())
    answers = answers[:-1]
    random.shuffle(answers)
    await callback.message.answer(text=questions[1], reply_markup=create_inline_kb(1, *answers))
    await state.set_state(DoQuiz.answer2)

@router.callback_query(F.data, DoQuiz.answer2)
async def answer_2(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer2 = callback.data)
    with open('exchange_look_quizzes.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    data = data[0]
    name_quiz = list(data.keys())
    data = data[name_quiz[0]]
    questions = list(data.keys())
    answers = list(data.values())
    answers = answers[:-1]
    random.shuffle(answers)
    await callback.message.answer(text=questions[2], reply_markup=create_inline_kb(1, *answers))
    await state.set_state(DoQuiz.answer3)

@router.callback_query(F.data, DoQuiz.answer3)
async def answer_3(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer3 = callback.data)
    with open('exchange_look_quizzes.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    data = data[0]
    name_quiz = list(data.keys())
    data = data[name_quiz[0]]
    answers = list(data.values())
    answers = answers[:-1]
    answers_user = await state.get_data()
    if answers == [answers_user['answer1'], answers_user['answer2'], answers_user['answer3']]:
        await callback.message.answer('–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª–∏ –∫–≤–∏–∑. –ë–æ–Ω—É—Å –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à —Å—á–µ—Ç')
        await db.give_bonus(float(data['–Ω–∞–≥—Ä–∞–¥–∞']), callback.from_user.id)
        async with aiosqlite.connect('userdata.db') as conn:
            await conn.execute('DELETE FROM quizzes')
            await conn.commit()
        await db.info_user_for_user(callback.from_user.id, datetime.now().isoformat())
        await state.clear()
    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –æ–¥–Ω–æ–º –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!')
        async with aiosqlite.connect('userdata.db') as conn:
            await conn.execute('DELETE FROM quizzes')
            await conn.commit()
        await state.clear()


async def check_subscription(user_id: int, channel_id: str, bot) -> bool:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR,
                                 ChatMemberStatus.MEMBER]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False
@router.callback_query(F.data == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å')
async def check_subcribe(callback: CallbackQuery):
    channel = callback.message.text.split('\n')[1].split('/')[-1]
    print(channel)
    subscribed = await check_subscription(callback.from_user.id, channel)

    if subscribed:
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")